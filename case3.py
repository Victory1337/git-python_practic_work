# number_guessing_game.py
import random
import json
import datetime
import os

class NumberGuessingGame:
    """
    –ö–ª–∞—Å—Å –¥–ª—è –∏–≥—Ä—ã '–£–≥–∞–¥–∞–π —á–∏—Å–ª–æ'
    """
    
    def __init__(self, min_number=1, max_number=100, max_attempts=7):
        self.min_number = min_number
        self.max_number = max_number
        self.max_attempts = max_attempts
        self.target_number = 0
        self.attempts = 0
        self.used_numbers = []
        self.game_active = False
        self.stats_file = "game_statistics.json"
        self.load_statistics()
    
    def generate_number(self):
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å–ª—É—á–∞–π–Ω–æ–≥–æ —á–∏—Å–ª–∞"""
        self.target_number = random.randint(self.min_number, self.max_number)
        self.attempts = 0
        self.used_numbers = []
        self.game_active = True
    
    def show_instructions(self):
        """–ü–æ–∫–∞–∑–∞—Ç—å –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—é –∫ –∏–≥—Ä–µ"""
        print("\n" + "="*50)
        print("üéØ –ò–ì–†–ê '–£–ì–ê–î–ê–ô –ß–ò–°–õ–û'")
        print("="*50)
        print(f"–Ø –∑–∞–≥–∞–¥–∞–ª —á–∏—Å–ª–æ –æ—Ç {self.min_number} –¥–æ {self.max_number}")
        print(f"–£ –≤–∞—Å –µ—Å—Ç—å {self.max_attempts} –ø–æ–ø—ã—Ç–æ–∫, —á—Ç–æ–±—ã —É–≥–∞–¥–∞—Ç—å –µ–≥–æ!")
        print("\n–ü–æ—Å–ª–µ –∫–∞–∂–¥–æ–π –ø–æ–ø—ã—Ç–∫–∏ —è –ø–æ–¥—Å–∫–∞–∂—É:")
        print("  üîº '–°–ª–∏—à–∫–æ–º –º–∞–ª–µ–Ω—å–∫–æ–µ' - –µ—Å–ª–∏ –≤–∞—à–µ —á–∏—Å–ª–æ –º–µ–Ω—å—à–µ")
        print("  üîΩ '–°–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–µ' - –µ—Å–ª–∏ –≤–∞—à–µ —á–∏—Å–ª–æ –±–æ–ª—å—à–µ")
        print("  üéâ '–ü–æ–∑–¥—Ä–∞–≤–ª—è—é!' - –µ—Å–ª–∏ –≤—ã —É–≥–∞–¥–∞–ª–∏!")
        print("\n–ö–æ–º–∞–Ω–¥—ã:")
        print("  'help' - –ø–æ–∫–∞–∑–∞—Ç—å –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—é")
        print("  'stats' - –ø–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É")
        print("  'restart' - –Ω–∞—á–∞—Ç—å –Ω–æ–≤—É—é –∏–≥—Ä—É")
        print("  'quit' - –≤—ã–π—Ç–∏ –∏–∑ –∏–≥—Ä—ã")
        print("="*50 + "\n")
    
    def validate_input(self, user_input):
        """–í–∞–ª–∏–¥–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–≥–æ –≤–≤–æ–¥–∞"""
        try:
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã—Ö –∫–æ–º–∞–Ω–¥
            if user_input.lower() in ['quit', 'exit', 'q']:
                return 'QUIT'
            elif user_input.lower() in ['help', 'h']:
                return 'HELP'
            elif user_input.lower() in ['stats', 'statistics']:
                return 'STATS'
            elif user_input.lower() in ['restart', 'new', 'again']:
                return 'RESTART'
            
            # –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ –≤ —á–∏—Å–ª–æ
            guess = int(user_input)
            
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–∏–∞–ø–∞–∑–æ–Ω–∞
            if not (self.min_number <= guess <= self.max_number):
                return 'ERROR', f"‚ùå –ß–∏—Å–ª–æ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –æ—Ç {self.min_number} –¥–æ {self.max_number}!"
            
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏–µ
            if guess in self.used_numbers:
                return 'ERROR', "‚ö†Ô∏è –í—ã —É–∂–µ –≤–≤–æ–¥–∏–ª–∏ —ç—Ç–æ —á–∏—Å–ª–æ! –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥–æ–µ."
            
            return 'SUCCESS', guess
            
        except ValueError:
            return 'ERROR', "‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ!"
    
    def get_user_guess(self):
        """–ü–æ–ª—É—á–∏—Ç—å –∏ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –≤–≤–æ–¥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        while True:
            try:
                user_input = input(f"üé≤ –ü–æ–ø—ã—Ç–∫–∞ {self.attempts + 1}/{self.max_attempts}. –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ: ")
                
                result = self.validate_input(user_input)
                
                if result == 'QUIT':
                    return 'QUIT'
                elif result == 'HELP':
                    self.show_instructions()
                    continue
                elif result == 'STATS':
                    self.show_statistics()
                    continue
                elif result == 'RESTART':
                    return 'RESTART'
                elif result[0] == 'ERROR':
                    print(result[1])
                    continue
                elif result[0] == 'SUCCESS':
                    self.attempts += 1
                    self.used_numbers.append(result[1])
                    return result[1]
                    
            except KeyboardInterrupt:
                print("\n\n–ò–≥—Ä–∞ –ø—Ä–µ—Ä–≤–∞–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
                return 'QUIT'
            except Exception as e:
                print(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {e}")
                continue
    
    def check_guess(self, guess):
        """–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø—Ä–µ–¥–ø–æ–ª–æ–∂–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        if guess == self.target_number:
            print(f"üéâ –ü–æ–∑–¥—Ä–∞–≤–ª—è—é! –í—ã —É–≥–∞–¥–∞–ª–∏ —á–∏—Å–ª–æ {self.target_number} –∑–∞ {self.attempts} –ø–æ–ø—ã—Ç–æ–∫!")
            self.update_statistics(win=True)
            return 'WIN'
        elif guess < self.target_number:
            print("üîΩ –°–ª–∏—à–∫–æ–º –º–∞–ª–µ–Ω—å–∫–æ–µ! –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —á–∏—Å–ª–æ –ø–æ–±–æ–ª—å—à–µ")
        else:
            print("üîº –°–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–µ! –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —á–∏—Å–ª–æ –ø–æ–º–µ–Ω—å—à–µ")
        
        # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø–æ–¥—Å–∫–∞–∑–∫–∏ –ø–æ—Å–ª–µ –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö –ø–æ–ø—ã—Ç–æ–∫
        if self.attempts >= 3:
            self.provide_hint(guess)
        
        return 'CONTINUE'
    
    def provide_hint(self, guess):
        """–ü—Ä–µ–¥–æ—Å—Ç–∞–≤–∏—Ç—å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—É—é –ø–æ–¥—Å–∫–∞–∑–∫—É"""
        difference = abs(guess - self.target_number)
        range_size = self.max_number - self.min_number
        
        if difference <= range_size * 0.1:  # –í –ø—Ä–µ–¥–µ–ª–∞—Ö 10% –æ—Ç –¥–∏–∞–ø–∞–∑–æ–Ω–∞
            print("   üí° –û—á–µ–Ω—å –±–ª–∏–∑–∫–æ! –ü–æ—á—Ç–∏ —É–≥–∞–¥–∞–ª–∏!")
        elif difference <= range_size * 0.25:  # –í –ø—Ä–µ–¥–µ–ª–∞—Ö 25% –æ—Ç –¥–∏–∞–ø–∞–∑–æ–Ω–∞
            print("   üí° –î–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –±–ª–∏–∑–∫–æ! –ü—Ä–æ–¥–æ–ª–∂–∞–π—Ç–µ –≤ —Ç–æ–º –∂–µ –¥—É—Ö–µ!")
        elif self.attempts == self.max_attempts - 1:  # –ü–æ—Å–ª–µ–¥–Ω—è—è –ø–æ–ø—ã—Ç–∫–∞
            if self.target_number % 2 == 0:
                print("   üí° –ü–æ–¥—Å–∫–∞–∑–∫–∞: —á–∏—Å–ª–æ —á–µ—Ç–Ω–æ–µ!")
            else:
                print("   üí° –ü–æ–¥—Å–∫–∞–∑–∫–∞: —á–∏—Å–ª–æ –Ω–µ—á–µ—Ç–Ω–æ–µ!")
    
    def show_progress(self):
        """–ü–æ–∫–∞–∑–∞—Ç—å –ø—Ä–æ–≥—Ä–µ—Å—Å –∏–≥—Ä—ã"""
        remaining = self.max_attempts - self.attempts
        progress_bar = "‚ñà" * self.attempts + "‚ñë" * remaining
        print(f"–ü—Ä–æ–≥—Ä–µ—Å—Å: [{progress_bar}] {self.attempts}/{self.max_attempts} –ø–æ–ø—ã—Ç–æ–∫")
        print(f"–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω—ã–µ —á–∏—Å–ª–∞: {sorted(self.used_numbers)}")
    
    def load_statistics(self):
        """–ó–∞–≥—Ä—É–∑–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∏–∑ —Ñ–∞–π–ª–∞"""
        self.statistics = {
            'games_played': 0,
            'games_won': 0,
            'total_attempts': 0,
            'best_score': float('inf'),
            'win_streak': 0,
            'current_streak': 0,
            'history': []
        }
        
        try:
            if os.path.exists(self.stats_file):
                with open(self.stats_file, 'r', encoding='utf-8') as f:
                    loaded_stats = json.load(f)
                    self.statistics.update(loaded_stats)
        except Exception as e:
            print(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É: {e}")
    
    def save_statistics(self):
        """–°–æ—Ö—Ä–∞–Ω–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –≤ —Ñ–∞–π–ª"""
        try:
            with open(self.stats_file, 'w', encoding='utf-8') as f:
                json.dump(self.statistics, f, indent=2, ensure_ascii=False)
        except Exception as e:
            print(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É: {e}")
    
    def update_statistics(self, win):
        """–û–±–Ω–æ–≤–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É"""
        self.statistics['games_played'] += 1
        
        if win:
            self.statistics['games_won'] += 1
            self.statistics['total_attempts'] += self.attempts
            self.statistics['current_streak'] += 1
            self.statistics['win_streak'] = max(self.statistics['win_streak'], self.statistics['current_streak'])
            
            if self.attempts < self.statistics['best_score']:
                self.statistics['best_score'] = self.attempts
            
            # –î–æ–±–∞–≤–∏—Ç—å –≤ –∏—Å—Ç–æ—Ä–∏—é
            game_record = {
                'date': datetime.datetime.now().isoformat(),
                'target': self.target_number,
                'attempts': self.attempts,
                'result': 'win',
                'used_numbers': self.used_numbers
            }
            self.statistics['history'].append(game_record)
        else:
            self.statistics['current_streak'] = 0
            
            game_record = {
                'date': datetime.datetime.now().isoformat(),
                'target': self.target_number,
                'attempts': self.attempts,
                'result': 'lose',
                'used_numbers': self.used_numbers
            }
            self.statistics['history'].append(game_record)
        
        # –û–≥—Ä–∞–Ω–∏—á–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—é –ø–æ—Å–ª–µ–¥–Ω–∏–º–∏ 50 –∏–≥—Ä–∞–º–∏
        if len(self.statistics['history']) > 50:
            self.statistics['history'] = self.statistics['history'][-50:]
        
        self.save_statistics()
    
    def show_statistics(self):
        """–ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É"""
        print("\n" + "="*40)
        print("üìä –°–¢–ê–¢–ò–°–¢–ò–ö–ê –ò–ì–†–´")
        print("="*40)
        
        if self.statistics['games_played'] == 0:
            print("–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ–∫–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞. –°—ã–≥—Ä–∞–π—Ç–µ —Ö–æ—Ç—è –±—ã –æ–¥–Ω—É –∏–≥—Ä—É!")
            return
        
        win_rate = (self.statistics['games_won'] / self.statistics['games_played']) * 100
        
        print(f"–í—Å–µ–≥–æ —Å—ã–≥—Ä–∞–Ω–æ –∏–≥—Ä: {self.statistics['games_played']}")
        print(f"–ü–æ–±–µ–¥: {self.statistics['games_won']} ({win_rate:.1f}%)")
        print(f"–õ—É—á—à–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç: {self.statistics['best_score']} –ø–æ–ø—ã—Ç–æ–∫")
        
        if self.statistics['games_won'] > 0:
            avg_attempts = self.statistics['total_attempts'] / self.statistics['games_won']
            print(f"–°—Ä–µ–¥–Ω–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ø—ã—Ç–æ–∫: {avg_attempts:.1f}")
        
        print(f"–¢–µ–∫—É—â–∞—è —Å–µ—Ä–∏—è –ø–æ–±–µ–¥: {self.statistics['current_streak']}")
        print(f"–õ—É—á—à–∞—è —Å–µ—Ä–∏—è –ø–æ–±–µ–¥: {self.statistics['win_streak']}")
        print("="*40)
    
    def play_round(self):
        """–ò–≥—Ä–∞—Ç—å –æ–¥–∏–Ω —Ä–∞—É–Ω–¥"""
        self.generate_number()
        print(f"\nüéØ –ù–æ–≤—ã–π —Ä–∞—É–Ω–¥! –Ø –∑–∞–≥–∞–¥–∞–ª —á–∏—Å–ª–æ –æ—Ç {self.min_number} –¥–æ {self.max_number}")
        
        while self.game_active and self.attempts < self.max_attempts:
            self.show_progress()
            
            guess = self.get_user_guess()
            
            if guess == 'QUIT':
                self.game_active = False
                return 'QUIT'
            elif guess == 'RESTART':
                return 'RESTART'
            
            result = self.check_guess(guess)
            
            if result == 'WIN':
                self.game_active = False
                break
            
            if self.attempts >= self.max_attempts:
                print(f"\nüíî –ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –≤—ã –∏—Å—á–µ—Ä–ø–∞–ª–∏ –≤—Å–µ –ø–æ–ø—ã—Ç–∫–∏!")
                print(f"üí° –ó–∞–≥–∞–¥–∞–Ω–Ω–æ–µ —á–∏—Å–ª–æ –±—ã–ª–æ: {self.target_number}")
                self.update_statistics(win=False)
                break
        
        return 'CONTINUE'
    
    def ask_play_again(self):
        """–°–ø—Ä–æ—Å–∏—Ç—å, —Ö–æ—á–µ—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∏–≥—Ä–∞—Ç—å —Å–Ω–æ–≤–∞"""
        while True:
            try:
                choice = input("\n–•–æ—Ç–∏—Ç–µ —Å—ã–≥—Ä–∞—Ç—å –µ—â–µ —Ä–∞–∑? (y/n): ").lower().strip()
                
                if choice in ['y', 'yes', '–¥–∞', '–¥']:
                    return True
                elif choice in ['n', 'no', '–Ω–µ—Ç', '–Ω']:
                    return False
                else:
                    print("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ 'y' (–¥–∞) –∏–ª–∏ 'n' (–Ω–µ—Ç)")
            except KeyboardInterrupt:
                return False
            except Exception:
                return False
    
    def change_difficulty(self):
        """–ò–∑–º–µ–Ω–∏—Ç—å —É—Ä–æ–≤–µ–Ω—å —Å–ª–æ–∂–Ω–æ—Å—Ç–∏"""
        print("\n" + "="*30)
        print("üéöÔ∏è –í–´–ë–û–† –°–õ–û–ñ–ù–û–°–¢–ò")
        print("="*30)
        print("1. –õ–µ–≥–∫–∏–π (1-50, 10 –ø–æ–ø—ã—Ç–æ–∫)")
        print("2. –°—Ä–µ–¥–Ω–∏–π (1-100, 7 –ø–æ–ø—ã—Ç–æ–∫)")
        print("3. –°–ª–æ–∂–Ω—ã–π (1-200, 5 –ø–æ–ø—ã—Ç–æ–∫)")
        print("4. –≠–∫—Å–ø–µ—Ä—Ç (1-500, 3 –ø–æ–ø—ã—Ç–∫–∏)")
        print("5. –ù–∞—Å—Ç—Ä–æ–∏—Ç—å –≤—Ä—É—á–Ω—É—é")
        
        while True:
            try:
                choice = input("\n–í—ã–±–µ—Ä–∏—Ç–µ —É—Ä–æ–≤–µ–Ω—å —Å–ª–æ–∂–Ω–æ—Å—Ç–∏ (1-5): ").strip()
                
                if choice == '1':
                    self.min_number, self.max_number, self.max_attempts = 1, 50, 10
                    break
                elif choice == '2':
                    self.min_number, self.max_number, self.max_attempts = 1, 100, 7
                    break
                elif choice == '3':
                    self.min_number, self.max_number, self.max_attempts = 1, 200, 5
                    break
                elif choice == '4':
                    self.min_number, self.max_number, self.max_attempts = 1, 500, 3
                    break
                elif choice == '5':
                    try:
                        min_num = int(input("–ú–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ —á–∏—Å–ª–æ: "))
                        max_num = int(input("–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ —á–∏—Å–ª–æ: "))
                        attempts = int(input("–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ø—ã—Ç–æ–∫: "))
                        
                        if min_num >= max_num:
                            print("–ú–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ —á–∏—Å–ª–æ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –º–µ–Ω—å—à–µ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–≥–æ!")
                            continue
                        if attempts <= 0:
                            print("–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ø—ã—Ç–æ–∫ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º!")
                            continue
                        
                        self.min_number, self.max_number, self.max_attempts = min_num, max_num, attempts
                        break
                    except ValueError:
                        print("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–æ–¥–∏—Ç–µ —Ü–µ–ª—ã–µ —á–∏—Å–ª–∞!")
                else:
                    print("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –æ—Ç 1 –¥–æ 5")
            except KeyboardInterrupt:
                return
            except Exception as e:
                print(f"–û—à–∏–±–∫–∞: {e}")
    
    def main_menu(self):
        """–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –∏–≥—Ä—ã"""
        print("üéÆ –î–û–ë–†–û –ü–û–ñ–ê–õ–û–í–ê–¢–¨ –í –ò–ì–†–£ '–£–ì–ê–î–ê–ô –ß–ò–°–õ–û'!")
        
        while True:
            print("\n" + "="*30)
            print("–ì–õ–ê–í–ù–û–ï –ú–ï–ù–Æ")
            print("="*30)
            print("1. –ù–∞—á–∞—Ç—å –∏–≥—Ä—É")
            print("2. –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è")
            print("3. –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞")
            print("4. –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–ª–æ–∂–Ω–æ—Å—Ç–∏")
            print("5. –í—ã–π—Ç–∏")
            
            try:
                choice = input("\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ (1-5): ").strip()
                
                if choice == '1':
                    self.start_game()
                elif choice == '2':
                    self.show_instructions()
                elif choice == '3':
                    self.show_statistics()
                elif choice == '4':
                    self.change_difficulty()
                elif choice == '5':
                    print("–°–ø–∞—Å–∏–±–æ –∑–∞ –∏–≥—Ä—É! –î–æ —Å–≤–∏–¥–∞–Ω–∏—è! üëã")
                    break
                else:
                    print("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –æ—Ç 1 –¥–æ 5")
                    
            except KeyboardInterrupt:
                print("\n\n–ò–≥—Ä–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞. –î–æ —Å–≤–∏–¥–∞–Ω–∏—è! üëã")
                break
            except Exception as e:
                print(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {e}")
    
    def start_game(self):
        """–ó–∞–ø—É—Å–∫ –∏–≥—Ä–æ–≤–æ–≥–æ –ø—Ä–æ—Ü–µ—Å—Å–∞"""
        playing = True
        
        while playing:
            result = self.play_round()
            
            if result == 'QUIT':
                break
            elif result == 'RESTART':
                continue
            
            playing = self.ask_play_again()
        
        print("\n–í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é...")

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –ø—Ä–æ–≥—Ä–∞–º–º—ã"""
    try:
        game = NumberGuessingGame()
        game.main_menu()
    except KeyboardInterrupt:
        print("\n\n–ò–≥—Ä–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞. –î–æ —Å–≤–∏–¥–∞–Ω–∏—è! üëã")
    except Exception as e:
        print(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        print("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç–µ –ø—Ä–æ–≥—Ä–∞–º–º—É.")

if __name__ == "__main__":
    main()